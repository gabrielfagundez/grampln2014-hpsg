;;; Categorias gramaticales ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

expression := *top* &
[ HEAD pos,
  SPR *list*,
  COMPS *list*,
  MODS *list* ].

pos := *top*.

adverb := pos.

preposition := pos.

participle := agr-pos.

conjunction := pos.

verb := agr-pos &
[ AGR agr-cat-p ].

determiner := agr-pos-pg.

noun := agr-pos-pg.

adjective := agr-pos &
[ AGR agr-cat-g ].

;;; Concordancia ;;;
;;;;;;;;;;;;;;;;;;;;

num-cat := *top*.
pl := num-cat.
sg := num-cat.

gen-cat := *top*.
ml := gen-cat.
fm := gen-cat.

per-cat := *top*.

agr-pos := pos &
[ AGR agr-cat ].

agr-pos-pg := agr-pos &
[ AGR agr-cat-pg ].

agr-cat := *top* &
[ NUM num-cat ].

agr-cat-p := agr-cat &
[ PER per-cat ].

agr-cat-g := agr-cat &
[ GEN gen-cat ].

agr-cat-pg := agr-cat-p & agr-cat-g.

;;; Lexemas ;;;
;;;;;;;;;;;;;;;

phrase := expression &
[ ORTH string,
  ARGS *list* ].

nounp := phrase &
[ HEAD noun & [ AGR.NUM #num, AGR.GEN #gen ],
  SPR < phrase & [ HEAD determiner & [ AGR.NUM #num, AGR.GEN #gen ] ] >,
  COMPS < >,
  MODS *list* ].

partp := phrase &
[ HEAD participle,
  SPR < >,
  COMPS < >,
  MODS < > ].

partp-sg := partp &
[ HEAD [ AGR [ NUM sg ] ] ].

partp-pl := partp &
[ HEAD [ AGR [ NUM pl ] ] ].

conjp := phrase &
[ HEAD conjunction,
  SPR < >,
  MODS < >,
  COMPS < phrase & [ HEAD noun ], phrase & [ HEAD noun ] > ].

nounp-sg-ml := nounp &
[ HEAD [ AGR [ NUM sg, GEN ml ]]].

nounp-sg-fm := nounp &
[ HEAD [ AGR [ NUM sg, GEN fm ]]].

nounp-pl-ml := nounp &
[ HEAD [ AGR [ NUM pl, GEN ml ]]].

nounp-pl-fm := nounp &
[ HEAD [ AGR [ NUM pl, GEN fm ]]].

verbp := phrase &
[ HEAD verb & [ AGR.NUM #num, AGR.PER #per ],
  SPR < phrase & [ HEAD noun & [ AGR.NUM #num, AGR.PER #per ] ] >, 
  MODS < advp > ].

verb-tobe := verbp-tr-p &
[ HEAD verb & [ AGR.NUM #num, AGR.PER #per ],
  PART < phrase & [ HEAD participle & [ AGR.NUM #num, AGR.PER #per ] ] > ].

verbp-intr := verbp &
[ COMPS < > ].

head-noun := phrase &
[ HEAD noun,
  SPR < > ].

head-preposition := phrase &
[ HEAD preposition,
  SPR < >,
  COMPS < >,
  MODS < > ].

verbp-tr-n := verbp &
[ COMPS < head-noun > ].

verbp-tr-p := verbp &
[ COMPS < head-preposition > ].

verbp-ditr-pn := verbp &
[ COMPS < head-preposition,
          head-noun > ].

verbp-ditr-np := verbp &
[ COMPS < [ HEAD noun ],
          head-preposition > ].

verbp-ditr-pp := verbp &
[ COMPS < head-preposition,
          head-preposition > ].

verbp-ditr-nn := verbp &
[ COMPS < head-noun,
          head-noun > ].

detp := phrase &
[ HEAD determiner,
  SPR < >,
  COMPS < >,
  MODS < > ].

detp-sg-ml := detp &
[ HEAD [ AGR [ NUM sg, GEN ml ]]].

detp-sg-fm := detp &
[ HEAD [ AGR [ NUM sg, GEN fm ]]].

detp-pl-ml := detp &
[ HEAD [ AGR [ NUM pl, GEN ml ]]].

detp-pl-fm := detp &
[ HEAD [ AGR [ NUM pl, GEN fm ]]].

advp := phrase &
[ HEAD adverb,
  SPR < >,
  COMPS < >,
  MODS < > ].

prepp := phrase &
[ HEAD preposition,
  SPR < >,
  COMPS < [ HEAD noun, COMPS < > ] >,
  MODS < > ].

adjp := phrase &
[ HEAD adjective,
  SPR < >,
  COMPS < >,
  MODS < advp > ].

adjp-sg-ml := adjp &
[ HEAD [ AGR [ NUM sg, GEN ml ]]].

adjp-sg-fm := adjp &
[ HEAD [ AGR [ NUM sg, GEN fm ]]].

adjp-pl-ml := adjp &
[ HEAD [ AGR [ NUM pl, GEN ml ]]].

adjp-pl-fm := adjp &
[ HEAD [ AGR [ NUM pl, GEN fm ]]].

;;; Tipos basicos ;;;
;;;;;;;;;;;;;;;;;;;;;

string := *top*.

*list* := *top*.

*ne-list* := *list* &
[ FIRST *top*,
  REST *list* ].

*null* := *list*.
